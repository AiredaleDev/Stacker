32 64 + 98 = . \ Prints '1'

\ Semantically equivalent to the above.
32
64
+
98
=
.

\ Pushes x onto the stack.
\ Then, we operate on our stack all the same.
double x proc
    dup + \ Push a copy onto the top of the stack and add the top two elements.
end

print value proc
    value . pop
end

\ No arguments, so this is a subroutine
subroutine proc
    777 . pop \ Print 777 and get rid of it.
    1 if
        "Will always run" print \ Calling a previously defined procedure.
    else
        "Will never run" print
    end
end

\ I wonder how you'd do something like, say, binary search?
\ My gut says that subroutines should not be able to see more of the stack
\ than they are explicitly allowed. If they try to pop past/read beyond their arguments
\ that should be a "segmentation fault"
